{
	// Place your compiler 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ProRoot":{
		"scope": "cpp",
		"prefix": "proRoot",
		"body": [
			"grammer_tree* root = newNode($1);",
			"grammer_tree* nowNode = root;"
		],
		"description": "produce a root node at the beginning"
	},
	"newChild":{
		"scope": "cpp",
		"prefix": "newChild",
		"body": [
			"if(root == nowNode)",
			"{",
			"nowNode->child = $TM_SELECTED_TEXT",
			"nowNode = nowNode->child;",
			"}",
			"else",
			"{",
			"nowNode->next = $TM_SELECTED_TEXT",
			"nowNode = nowNode->next;",
			"}",
		],
		"description": "produce a new child"
	},
	"unewChild":{
		"scope": "cpp",
		"prefix": "unewChild",
		"body": [
			"if(root == nowNode)",
			"{",
			"nowNode->child = newNode(encode(\"$1\"));",
			"nowNode = nowNode->child;",
			"}",
			"else",
			"{",
			"nowNode->next = newNode(encode(\"$1\"));",
			"nowNode = nowNode->next;",
			"}",
		],
		"description": "produce a new child (ultimate operator)"
	},
	"fnewNode":{
		"scope": "cpp",
		"prefix": "fnew",
		"body": [
			"newNode(encode($1));"
		],
		"description": "newNode conveniently"
	},
	"re":{
		"scope": "cpp",
		"prefix": "rerr",
		"body": [
			"return root;"
		],
		"description": "return sentences"
	}
	
	
}